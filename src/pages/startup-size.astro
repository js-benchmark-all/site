---
import Page from "$layouts/Page.astro";
---

<Page title="Benchmark results - startup & size">
  <div id="loading">Loading benchmark data...</div>
  <div id="root"></div>

  <script>
    import Chart from "chart.js/auto";
    import { actions } from "astro:actions";

    const ROBOTO_MONO = { family: "'Roboto Mono', monospace" };
    const OPTIONS = {
      indexAxis: "y",
      scales: {
        x: {
          beginAtZero: true,
          ticks: {
            callback: (value: any) => +(+value).toFixed(2),
            font: ROBOTO_MONO,
          },
        },
        y: {
          ticks: {
            font: { size: 13, ...ROBOTO_MONO },
          },
        },
      },
      plugins: {
        legend: {
          display: true,
          position: "top",
          labels: {
            font: ROBOTO_MONO,
          },
        },
        tooltip: {
          bodyFont: ROBOTO_MONO,
          callbacks: {
            label: (ctx: any) =>
              ctx.dataset.label! + ": " + ctx.parsed.x.toFixed(2),
          },
        },
      },
      responsive: true,
      maintainAspectRatio: false,
      font: ROBOTO_MONO,
    } as const;

    const ROOT = document.getElementById("root")!;
    const LOADING = document.getElementById("loading")!;

    const createHeader = (text: string, type: number) => {
      const header = document.createElement("h" + type);
      header.textContent = text;
      ROOT.appendChild(header);
      return header;
    };

    const createChart = (id: string) => {
      const section = document.createElement("section");
      section.className = "chart-container";

      const canvas = document.createElement("canvas");
      canvas.id = id;
      section.appendChild(canvas);

      ROOT.appendChild(section);
      return canvas;
    };

    const load = (data: any, prev: string[]) => {
      if (Array.isArray(data.labels) && Array.isArray(data.datasets))
        new Chart(
          createChart(prev.join("-").replace(/\W/g, "-")).getContext("2d")!,
          {
            type: "bar",
            data,
            options: OPTIONS,
          },
        );
      else {
        for (const name in data) {
          createHeader(name, prev.length + 1);
          load(data[name], prev.concat([name]));
        }
      }
    };

    load(await actions.startupSize.orThrow(), []);

    LOADING.style.display = "none";
    ROOT.style.display = "block";
  </script>

  <style is:global>
    body {
      margin: 20px;
      background: #f9f9f9;
      color: #333;
      text-align: center;
    }

    #root {
      display: none;
    }

    #loading {
      font-size: 1.5em;
      text-align: center;
      margin-top: 100px;
      color: #666;
    }

    .chart-container {
      width: 90%;
      max-width: 1100px;
      margin: 20px auto 40px auto;
      padding: 20px;
      background: #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      text-align: center;
    }

    canvas {
      height: 400px !important;
      display: inline-block;
    }

    h1 {
      font-weight: 700;
      font-size: 2.5em;
      margin-top: 1em;
      text-align: center;
    }

    h2 {
      font-weight: 600;
      font-size: 1.8em;
      margin-top: 1.5em;
      margin-bottom: 0.5em;
      padding-bottom: 0.1em;
      text-align: center;
    }
  </style>
</Page>
