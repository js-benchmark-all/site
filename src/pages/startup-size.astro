---
import Page from "$layouts/Page.astro";
---

<Page title="Benchmark results - startup & size">
  <div id="loading">Loading benchmark data...</div>
  <div id="root"></div>

  <script>
    import Chart from "chart.js/auto";
    import { actions } from "astro:actions";

    const ROBOTO_MONO = { family: "'Roboto Mono', monospace" };
    const OPTIONS = {
      indexAxis: "y",
      scales: {
        x: {
          beginAtZero: true,
          ticks: {
            callback: (value: any) => +(+value).toFixed(2),
            font: ROBOTO_MONO,
          },
        },
        y: {
          ticks: {
            font: { size: 14, ...ROBOTO_MONO },
          },
        },
      },
      plugins: {
        legend: {
          display: true,
          position: "top",
          labels: {
            font: ROBOTO_MONO,
          },
        },
        tooltip: {
          bodyFont: ROBOTO_MONO,
          callbacks: {
            label: (ctx: any) =>
              ctx.dataset.label! + ": " + ctx.parsed.x.toFixed(2),
          },
        },
      },
      responsive: true,
      maintainAspectRatio: false,
      font: ROBOTO_MONO,
    } as const;

    const ROOT = document.getElementById("root")!;
    const LOADING = document.getElementById("loading")!;

    const RESULTS = await actions.getStartupSize.orThrow();

    const createHeader = (text: string, type: "h2" | "h3") => {
      const header = document.createElement(type);
      header.textContent = text;
      ROOT.appendChild(header);
      return header;
    };

    const createCategoryHeader = (cat: string) => {
      const link = document.createElement("a");

      link.href =
        "https://github.com/js-benchmark-all/startup-size/tree/main/src/" + cat;
      link.target = "__blank";
      link.appendChild(createHeader(cat, "h3"));
      ROOT.appendChild(link);

      return link;
    };

    const createChart = (id: string) => {
      const section = document.createElement("section");
      section.className = "chart-container";

      const canvas = document.createElement("canvas");
      canvas.id = id;
      section.appendChild(canvas);

      ROOT.appendChild(section);
      return canvas;
    };

    {
      const DATA = RESULTS.startup;

      for (const runtime in DATA) {
        const categories = DATA[runtime];
        createHeader(runtime, "h2");

        for (const category in categories) {
          const metrics = categories[category];
          createCategoryHeader(category);

          // Collect all unique labels (framework/validator names) across all metrics
          const labels = Array.from(
            new Set<string>(
              Object.values(metrics).flatMap((item) => item.map((i) => i[0])),
            ),
          );

          // Prepare datasets for each metric
          const datasets = Object.entries(metrics).map(
            ([metric, rawData], i) => {
              // Map label to value for this metric
              const valueMap = new Map(rawData);

              return {
                label: metric + " (ms)",
                // Build data array aligned with labels
                data: labels.map((label) => {
                  const val = valueMap.get(label);
                  if (val == null) return Infinity;

                  // Cast ns to ms
                  return val / 1e6;
                }),
                borderWidth: 1,
              };
            },
          );

          new Chart(
            createChart(
              runtime.replace(/\W/g, "-") + "-" + category.replace(/\W/g, "-"),
            ).getContext("2d")!,
            {
              type: "bar",
              data: {
                labels,
                datasets,
              },
              options: OPTIONS,
            },
          );
        }
      }

      {
        createHeader("Size", "h2");

        const DATA = Object.groupBy(RESULTS.size, (o) => o.category);

        for (const category in DATA) {
          const data = DATA[category]!.sort(
            (a, b) => a.size.minified - b.size.minified,
          );
          createCategoryHeader(category);

          const labels = data.map((item) => item.name);
          const datasets = Object.keys(data[0].size).map((key) => ({
            label: key + " (kB)",
            data: data.map((item) => item.size[key] / 1e3),
            borderWidth: 1,
          }));

          new Chart(
            createChart("size-" + category.replace(/\W/g, "-")).getContext(
              "2d",
            )!,
            {
              type: "bar",
              data: {
                labels,
                datasets,
              },
              options: OPTIONS,
            },
          );
        }
      }

      LOADING.style.display = "none";
      ROOT.style.display = "block";
    }
  </script>

  <style is:global>
    body {
      margin: 20px;
      background: #f9f9f9;
      color: #333;
      text-align: center;
    }

    #root {
      display: none;
    }

    #loading {
      font-size: 1.5em;
      text-align: center;
      margin-top: 100px;
      color: #666;
    }

    .chart-container {
      width: 90%;
      max-width: 900px;
      margin: 20px auto 40px auto;
      padding: 20px;
      background: #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      text-align: center;
    }

    canvas {
      height: 400px !important;
      display: inline-block;
    }

    h1 {
      font-weight: 700;
      font-size: 2.5em;
      margin-top: 1em;
      margin-bottom: 0.5em;
      padding-bottom: 0.2em;
      text-align: center;
    }

    h2 {
      font-weight: 600;
      font-size: 1.8em;
      margin-top: 1.5em;
      margin-bottom: 0.5em;
      padding-bottom: 0.1em;
      text-align: center;
    }
  </style>
</Page>
